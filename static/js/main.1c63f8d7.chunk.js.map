{"version":3,"sources":["serviceWorker.js","actions.js","addnomberFolder/addNomber.js","contactsFolder/ContactsItem.js","contactsFolder/Contacts.js","filterFolder/Filter.js","inputChange/InputChange.js","inputChangeNumber/InputChangeNumber.js","phonebookFolder/Phonebook.js","initialState.js","reduce.js","store.js","index.js"],"names":["Boolean","window","location","hostname","match","addContact","createAction","payload","contact","id","uuid","name","number","removeContact","inputChangeName","inputChangeNumber","inputChangeContact","mapDispatchToProps","nomberEditor","actions","connect","type","onClick","ContactsItem","onRemoveTask","key","state","contactsAll","contacts","contactList","TransitionGroup","component","className","map","CSSTransition","timeout","classNames","searchAll","filter","onChange","e","target","value","Phonebook","in","appear","unmountOnExit","React","Component","initialState","items","newContact","contactReducer","createReducer","action","store","configureStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c63f8d7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createAction } from '@reduxjs/toolkit';\r\n// import types from \"./types\";\r\nimport { uuid } from \"uuidv4\";\r\n\r\nconst addContact = createAction(\"contact/add\", () => ({\r\n  payload: {\r\n    contact: {\r\n      id: uuid(),\r\n      name: \"\",\r\n      number: \"\",\r\n    },\r\n  },\r\n}))\r\n\r\n\r\n// const addContact = () => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     contact: {\r\n//       id: uuid(),\r\n//       name: \"\",\r\n//       number: \"\",\r\n//     },\r\n//   },\r\n// });\r\n\r\nconst removeContact = createAction(\"contact/remove\");\r\n\r\n// const removeContact = (contactId) => ({\r\n//   type: types.REMOVE_CONTACT,\r\n//   payload: {\r\n//     contactId,\r\n//   },\r\n// });\r\nconst inputChangeName = createAction(\"contact/name\");\r\n// const inputChangeName = (name) => ({\r\n//   type: types.SEARCH_NAME,\r\n//   payload: {\r\n//     name,\r\n//   },\r\n// });\r\nconst inputChangeNumber = createAction(\"contact/number\");\r\n// const inputChangeNumber = (number) => ({\r\n//   type: types.SEARCH_NUMBER,\r\n//   payload: {\r\n//     number,\r\n//   },\r\n// });\r\nconst inputChangeContact = createAction(\"contact/search\");\r\n// const inputChangeContact = (search) => ({\r\n//   type: types.SEARCH_CONTACT,\r\n//   payload: {\r\n//     search,\r\n//   },\r\n// });\r\n\r\nexport default {\r\n  addContact,\r\n  removeContact,\r\n  inputChangeName,\r\n  inputChangeNumber,\r\n  inputChangeContact,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../actions\";\r\n\r\nconst AddNomber = ({ nomberEditor }) => (\r\n  <div>\r\n    <button type=\"submit\" onClick={nomberEditor}>\r\n      ДОБАВИТЬ\r\n    </button>\r\n  </div>\r\n);\r\n\r\nAddNomber.propTypes = {\r\n  nomberEditor: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  nomberEditor: actions.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AddNomber);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactsItem = ({ id, name, number, onRemoveTask }) => (\r\n    <li key={id}>\r\n      <p>\r\n        {name} {number}\r\n      </p>\r\n      <button type=\"button\" onClick={() => onRemoveTask(id)}>\r\n        Удалить\r\n      </button>\r\n    </li>\r\n);\r\n\r\nContactsItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemoveTask: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsItem;","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"./FadeStyles.css\";\r\nimport ContactsItem from \"./ContactsItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../actions\";\r\n\r\nconst Contacts = ({ contactsAll, onRemoveTask }) => (\r\n  <TransitionGroup component=\"ul\" className=\"fade\">\r\n    {contactsAll.map(({ id, name, number }) => (\r\n      <CSSTransition key={id} timeout={250} classNames=\"fade\">\r\n        <ContactsItem\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          onRemoveTask={() => onRemoveTask(id)}\r\n        />\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nContacts.propTypes = {\r\n  contactsAll: PropTypes.array.isRequired,\r\n  onRemoveTask: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contactsAll: state.contacts.contactList,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onRemoveTask: actions.removeContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../actions\";\r\n\r\nconst Filter = ({ searchAll, inputChangeContact }) => (\r\n  <div>\r\n  <input type=\"text\" onChange={e => inputChangeContact(e.target.value)} />\r\n  <ul>\r\n    {searchAll.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        <p>{name} {number}</p>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchAll: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  inputChangeContact: actions.inputChangeContact,\r\n};\r\n\r\nFilter.propTypes = {\r\n  searchAll: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../actions\";\r\n\r\nconst InputChange = ({ inputChangeName }) => (\r\n  <div>\r\n    <p>Name</p>\r\n    <input\r\n      type=\"text\"\r\n      onChange={(e) => inputChangeName(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nInputChange.propTypes = {\r\n  inputChangeName: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  inputChangeName: actions.inputChangeName,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(InputChange);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../actions\";\r\n\r\nconst InputChangeNumber = ({ inputChangeNumber }) => (\r\n  <div>\r\n    <p>Number</p>\r\n    <input\r\n      type=\"text\"\r\n      onChange={(e) => inputChangeNumber(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nInputChangeNumber.propTypes = {\r\n  inputChangeNumber: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  inputChangeNumber: actions.inputChangeNumber,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(InputChangeNumber);\r\n","import React from \"react\";\r\nimport AddNomber from \"../addnomberFolder/addNomber\";\r\nimport Contacts from \"../contactsFolder/Contacts\";\r\nimport Filter from \"../filterFolder/Filter\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./MyStyles.css\";\r\nimport InputChange from \"../inputChange/InputChange\";\r\nimport InputChangeNumber from \"../inputChangeNumber/InputChangeNumber\";\r\n\r\nexport default class Phonebook extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames=\"my\"\r\n          timeout={500}\r\n          unmountOnExit\r\n        >\r\n          <h1>Phonebook</h1>\r\n        </CSSTransition>\r\n        <InputChange />\r\n        <InputChangeNumber />\r\n        <AddNomber />\r\n        <p>Search</p>\r\n        <Filter />\r\n        <p>Contacts</p>\r\n        <Contacts />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const initialState = {\r\n    items: {\r\n    contactList: [],\r\n        newContact: {\r\n                id: '',\r\n                name: '',\r\n                number: '',\r\n            },\r\n            filter: [],\r\n        },\r\n};\r\n\r\nexport default initialState;\r\n","// import types from \"./types\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport initialState from \"./initialState\";\r\nimport actions from \"./actions\";\r\n\r\nconst contactReducer = createReducer(initialState.items, {\r\n  [actions.inputChangeName]: (state, action) => ({\r\n    ...state,\r\n    newContact: {\r\n      ...state.newContact,\r\n      name: action.payload,\r\n    },\r\n  }),\r\n  [actions.inputChangeNumber]: (state, action) => ({\r\n    ...state,\r\n    newContact: {\r\n      ...state.newContact,\r\n      number: action.payload,\r\n    },\r\n  }),\r\n  [actions.addContact]: (state, action) => ({\r\n    ...state,\r\n    contactList: [\r\n      ...state.contactList,\r\n      {\r\n        id: action.payload.contact.id,\r\n        name: state.newContact.name,\r\n        number: state.newContact.number,\r\n      },\r\n    ],\r\n  }),\r\n\r\n  [actions.removeContact]: (state, action) => ({\r\n    ...state,\r\n    contactList: state.contactList.filter((contact) => contact.id !== action.payload),\r\n  }),\r\n\r\n  [actions.inputChangeContact]: (state, action) => ({\r\n    ...state,\r\n    filter: [\r\n      ...state.contactList.filter((contact) => contact.name === action.payload),\r\n    ],\r\n  }),\r\n\r\n});\r\n\r\nexport default contactReducer;\r\n//   state = initialState.items,\r\n//   { type, payload }\r\n// ) {\r\n//   switch (type) {\r\n//     case actions.inputChangeName.type: {\r\n//       return {\r\n//         ...state,\r\n//         newContact: {\r\n//           ...state.newContact,\r\n//           name: payload,\r\n//         },\r\n//       };\r\n//     }\r\n\r\n//     case actions.inputChangeNumber.type: {\r\n//       return {\r\n//         ...state,\r\n//         newContact: {\r\n//           ...state.newContact,\r\n//           number: payload,\r\n//         },\r\n//       };\r\n//     }\r\n\r\n//     case actions.addContact.type: {\r\n//       return {\r\n//         ...state,\r\n//         contactList: [\r\n//           ...state.contactList,\r\n//           {\r\n//             id: payload.contact.id,\r\n//             name: state.newContact.name,\r\n//             number: state.newContact.number,\r\n//           },\r\n//         ],\r\n//       };\r\n//     }\r\n\r\n//     case actions.removeContact.type:\r\n//       return {\r\n//         ...state,\r\n//         contactList: state.contactList.filter(\r\n//           (contact) => contact.id !== payload\r\n//         ),\r\n//       };\r\n\r\n//     case actions.inputChangeContact.type: {\r\n//       return {\r\n//         ...state,\r\n//         filter: [\r\n//           ...state.contactList.filter((contact) => contact.name === payload),\r\n//         ],\r\n//       };\r\n//     }\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n","import contactReducer from \"./reduce\";\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport Phonebook from \"./phonebookFolder/Phonebook\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Phonebook />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}